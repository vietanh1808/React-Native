{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useAsyncStorage } from \"@react-native-async-storage/async-storage\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { ListViewBase } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\n\nfunction Register(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setUsername = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      rePassword = _useState6[0],\n      setRePassword = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      users = _useState8[0],\n      setUsers = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      userKeys = _useState10[0],\n      setUserKeys = _useState10[1];\n\n  var readItemFromStorage = function readItemFromStorage() {\n    var values, usernameKeys;\n    return _regeneratorRuntime.async(function readItemFromStorage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getAllKeys());\n\n          case 3:\n            usernameKeys = _context.sent;\n            setUserKeys.apply(void 0, _toConsumableArray(userKeys).concat([usernameKeys]));\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(AsyncStorage.multiGet(usernameKeys));\n\n          case 7:\n            values = _context.sent;\n            values.map(function (value, index) {\n              return setUsers(function (prev) {\n                return [].concat(_toConsumableArray(prev), [value]);\n              });\n            });\n            _context.next = 13;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n\n  var writeItemToStorage = function writeItemToStorage(newValue) {\n    var isExist;\n    return _regeneratorRuntime.async(function writeItemToStorage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            isExist = userKeys.includes(username);\n\n            if (!isExist) {\n              _context2.next = 4;\n              break;\n            }\n\n            Alert.alert(\"Tài khoản đã tồn tại!\");\n            return _context2.abrupt(\"return\");\n\n          case 4:\n            if (!(rePassword !== password)) {\n              _context2.next = 7;\n              break;\n            }\n\n            Alert.alert(\"Mật khẩu không đúng!\");\n            return _context2.abrupt(\"return\");\n\n          case 7:\n            _context2.prev = 7;\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(AsyncStorage.multiSet([[username, password]]));\n\n          case 10:\n            _context2.next = 14;\n            break;\n\n          case 12:\n            _context2.prev = 12;\n            _context2.t0 = _context2[\"catch\"](7);\n\n          case 14:\n            return _context2.abrupt(\"return\", navigation.navigate('Login'));\n\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[7, 12]], Promise);\n  };\n\n  useEffect(function () {\n    readItemFromStorage();\n    return function () {};\n  }, []);\n  return React.createElement(View, null, React.createElement(TextInput, {\n    value: username,\n    onChangeText: function onChangeText(text) {\n      return setUsername(text);\n    },\n    style: styles.input,\n    placeholder: \"T\\xEAn \\u0111\\u0103ng nh\\u1EADp...\"\n  }), React.createElement(TextInput, {\n    value: password,\n    onChangeText: function onChangeText(text) {\n      return setPassword(text);\n    },\n    style: styles.input,\n    placeholder: \"M\\u1EADt kh\\u1EA9u...\"\n  }), React.createElement(TextInput, {\n    value: rePassword,\n    onChangeText: function onChangeText(text) {\n      return setRePassword(text);\n    },\n    style: styles.input,\n    placeholder: \"Nh\\u1EADp l\\u1EA1i m\\u1EADt kh\\u1EA9u...\"\n  }), React.createElement(View, {\n    style: styles.button\n  }, React.createElement(Button, {\n    style: styles.button,\n    title: \"\\u0110\\u0102NG K\\xDD\",\n    onPress: function onPress() {\n      return writeItemToStorage();\n    }\n  }), React.createElement(Button, {\n    title: \"CLEAR\",\n    color: \"#f194ff\",\n    onPress: function onPress() {\n      return AsyncStorage.clear();\n    }\n  }), React.createElement(Button, {\n    title: \"SHOW\",\n    onPress: readItemFromStorage\n  })), users.map(function (user, index) {\n    return React.createElement(Text, {\n      key: index\n    }, index, \", \", user);\n  }));\n}\n\nvar styles = StyleSheet.create({\n  input: {\n    borderWidth: 1,\n    padding: 10,\n    margin: 10\n  },\n  button: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\"\n  }\n});\nexport default Register;","map":{"version":3,"sources":["J:/Documents/React Native/HelloWorld/src/screens/Register.js"],"names":["useAsyncStorage","React","useEffect","useRef","useState","AsyncStorage","ListViewBase","Register","navigation","username","setUsername","password","setPassword","rePassword","setRePassword","users","setUsers","userKeys","setUserKeys","readItemFromStorage","getAllKeys","usernameKeys","multiGet","values","map","value","index","prev","writeItemToStorage","newValue","isExist","includes","Alert","alert","multiSet","navigate","text","styles","input","button","clear","user","StyleSheet","create","borderWidth","padding","margin","flexDirection","justifyContent"],"mappings":"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","sourcesContent":["import { useAsyncStorage } from \"@react-native-async-storage/async-storage\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { Alert, AsyncStorage, Button, ListViewBase, StyleSheet, Text, TextInput, View } from \"react-native\";\r\n\r\nfunction Register({ navigation }) {\r\n\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [rePassword, setRePassword] = useState('')\r\n    const [users, setUsers] = useState([])\r\n    const [userKeys, setUserKeys] = useState([])\r\n\r\n    const readItemFromStorage = async () => {\r\n        let values\r\n        try {\r\n            const usernameKeys = await AsyncStorage.getAllKeys();\r\n            setUserKeys(...userKeys, usernameKeys)\r\n            values = await AsyncStorage.multiGet(usernameKeys)\r\n\r\n            values.map((value, index) => (\r\n                setUsers(prev => {\r\n                    return [\r\n                        ...prev,\r\n                        value\r\n                    ]\r\n                })\r\n            ))\r\n        } catch(e) {\r\n          // read error\r\n        }\r\n    };\r\n\r\n    const writeItemToStorage = async newValue => {\r\n        const isExist = userKeys.includes(username)\r\n        if (isExist) {\r\n            Alert.alert(\"Tài khoản đã tồn tại!\")\r\n            return\r\n        }\r\n        if (rePassword !== password) {\r\n            Alert.alert(\"Mật khẩu không đúng!\")\r\n            return\r\n        }\r\n\r\n        try {\r\n            await AsyncStorage.multiSet([[username, password]]);\r\n        } catch (error) {\r\n            \r\n        }\r\n\r\n        return navigation.navigate('Login')\r\n\r\n        // setUsername('')\r\n        // setPassword('')\r\n        // setRePassword('')\r\n    };\r\n\r\n    useEffect(() => {\r\n        readItemFromStorage();\r\n        return () => {\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <View>\r\n            <TextInput \r\n                value={username}\r\n                onChangeText={(text) => setUsername(text)}\r\n                style={styles.input}\r\n                placeholder=\"Tên đăng nhập...\"\r\n            />\r\n            <TextInput \r\n                value={password}\r\n                onChangeText={(text) => setPassword(text)}\r\n                style={styles.input}\r\n                placeholder=\"Mật khẩu...\"\r\n            />\r\n            <TextInput \r\n                value={rePassword}\r\n                onChangeText={(text) => setRePassword(text)}\r\n                style={styles.input}\r\n                placeholder=\"Nhập lại mật khẩu...\"\r\n            />\r\n            <View style={styles.button}>\r\n                <Button\r\n                    style={styles.button}\r\n                    title=\"ĐĂNG KÝ\"\r\n                    onPress={() => writeItemToStorage()}\r\n                />\r\n                <Button \r\n                    title=\"CLEAR\"\r\n                    color=\"#f194ff\"     \r\n                    onPress={() => AsyncStorage.clear()}     \r\n                />\r\n                <Button \r\n                    title=\"SHOW\"\r\n                    // onPress={() => Alert.alert('Users: ', users.toString)}  \r\n                    onPress={readItemFromStorage}\r\n                />\r\n            </View>\r\n            {users.map((user, index) => (\r\n                <Text key={index}>{index}, {user}</Text>\r\n            ))}\r\n            \r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    input: {\r\n        borderWidth: 1,\r\n        padding: 10,\r\n        margin: 10,\r\n    },\r\n    button: {\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-around\"\r\n    }\r\n})\r\n\r\nexport default Register"]},"metadata":{},"sourceType":"module"}